

Timer unit: 2.99601e-07 s

Total time: 0.722684 s
File: D:\github\py_sphere_Voronoi\voronoi_utility.py
Function: voronoi_region_vertices_spherical_surface at line 454

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   454                                               def voronoi_region_vertices_spherical_surface(self):
   455                                                   '''Returns a dictionary with the sorted (non-intersecting) polygon vertices for the Voronoi regions associated with each generator (original data point) index. A dictionary entry would be structured as follows: `{generator_index : array_polygon_vertices, ...}`.'''
   456                                                   #use strategy for Voronoi region generation discussed at PyData London 2015 with Ross Hemsley and Nikolai Nowaczyk
   457                                                   #step 2: perform 3D Delaunay triangulation on data set that includes the extra generator
   458         1        21250  21250.0      0.9          tri = scipy.spatial.ConvexHull(self.original_point_array) #using ConvexHull is much faster in scipy (vs. Delaunay), but here we only get the triangles on the sphere surface in the simplices object (no longer adding an extra point at the origin at this stage)
   459                                                   #add the origin to each of the simplices to get the same tetrahedra we'd have gotten from Delaunay tetrahedralization
   460         1          624    624.0      0.0          simplex_coords = tri.points[tri.simplices] #triangles on surface surface
   461         1          536    536.0      0.0          simplex_coords = numpy.insert(simplex_coords, 3, numpy.zeros((1,3)), axis = 1)
   462                                                   #step 3: produce circumspheres / circumcenters of tetrahedra from 3D Delaunay
   463         1       218858 218858.0      9.1          array_circumcenter_coords = circumcircle.calc_circumcenter_circumsphere_tetrahedron_vectorized(simplex_coords)
   464                                                   #step 4: project tetrahedron circumcenters up to the surface of the sphere, to produce the Voronoi vertices
   465         1          414    414.0      0.0          array_vector_lengths = scipy.spatial.distance.cdist(array_circumcenter_coords, numpy.zeros((1,3)))
   466         1          274    274.0      0.0          array_Voronoi_vertices = (self.estimated_sphere_radius / numpy.abs(array_vector_lengths)) * array_circumcenter_coords
   467                                                   #step 5: use the Delaunay tetrahedralization neighbour information to connect the Voronoi vertices around the generators, to produce the Voronoi regions
   468         1            5      5.0      0.0          dictionary_sorted_Voronoi_point_coordinates_for_each_generator = {}
   469         1            4      4.0      0.0          array_tetrahedra = simplex_coords
   470         1            4      4.0      0.0          generator_index = 0
   471         1           27     27.0      0.0          generator_index_array = numpy.arange(self.original_point_array.shape[0])
   472         1       259047 259047.0     10.7          filter_tuple = numpy.where((numpy.expand_dims(tri.simplices, -1) == generator_index_array).any(axis=1))
   473         1         2043   2043.0      0.1          df = pandas.DataFrame({'generator_indices' : filter_tuple[1]}, index = filter_tuple[0])
   474         1          893    893.0      0.0          gb = df.groupby('generator_indices')
   475         1        14260  14260.0      0.6          dictionary_generators_and_triangle_indices_containing_those_generators = gb.groups
   476      2000         9373      4.7      0.4          for generator in tri.points[:-1]:
   477      1999        11395      5.7      0.5              indices_of_triangles_surrounding_generator = dictionary_generators_and_triangle_indices_containing_those_generators[generator_index]
   478                                                       #pick any one of the triangles surrounding the generator and pick a non-generator vertex
   479      1999         7530      3.8      0.3              first_tetrahedron_index = indices_of_triangles_surrounding_generator[0]
   480      1999         9676      4.8      0.4              first_tetrahedron = array_tetrahedra[first_tetrahedron_index]
   481      1999        10723      5.4      0.4              first_triangle = first_tetrahedron[:-1,...]
   482                                                       #pick one of the two non-generator vertices in the first triangle
   483      1999       140105     70.1      5.8              indices_non_generator_vertices_first_triangle = numpy.unique(numpy.where(first_triangle != generator)[0])
   484      1999        10501      5.3      0.4              ordered_list_tetrahedron_indices_surrounding_current_generator = [first_tetrahedron_index] 
   485                                                       #determine the appropriate ordering of Voronoi vertices to close the Voronoi region (polygon) by traversing the Delaunay neighbour data structure from scipy
   486      1999         8609      4.3      0.4              vertices_remaining = len(indices_of_triangles_surrounding_generator) - 1
   487                                                       #choose the neighbour opposite the first non-generator vertex of the first triangle
   488      1999        14352      7.2      0.6              neighbour_tetrahedral_index = tri.neighbors[first_tetrahedron_index][indices_non_generator_vertices_first_triangle[0]]
   489      1999        10805      5.4      0.4              ordered_list_tetrahedron_indices_surrounding_current_generator.append(neighbour_tetrahedral_index)
   490      1999         7410      3.7      0.3              vertices_remaining -= 1
   491                                                       
   492                                                       #for all subsequent triangles it is the common non-generator vertex with the previous neighbour that should be used to propagate the connection chain to the following neighbour
   493                                                       #the common vertex with the previous neighbour is the the vertex of the previous neighbour that was NOT used to locate the current neighbour
   494                                                       #since there are only two candidate vertices on the previous neighbour and I've chosen to use the vertex with index 0, the remaining vertex on the previous neighbour is the non-generator vertex with index 1
   495      1999        10859      5.4      0.5              common_vertex_coordinate = first_triangle[indices_non_generator_vertices_first_triangle[1]]
   496      9982        35657      3.6      1.5              while vertices_remaining > 0:
   497      7983        27711      3.5      1.1                  current_tetrahedron_index = ordered_list_tetrahedron_indices_surrounding_current_generator[-1]
   498      7983        38124      4.8      1.6                  current_tetrahedron_coord_array = array_tetrahedra[current_tetrahedron_index]
   499      7983        42676      5.3      1.8                  current_triangle_coord_array = current_tetrahedron_coord_array[:-1,...]
   500      7983       529349     66.3     21.9                  indices_candidate_vertices_current_triangle_excluding_generator = numpy.unique(numpy.where(current_triangle_coord_array != generator)[0])
   501      7983       103850     13.0      4.3                  array_candidate_vertices = current_triangle_coord_array[indices_candidate_vertices_current_triangle_excluding_generator]
   502      7983       531960     66.6     22.1                  current_tetrahedron_index_for_neighbour_propagation = numpy.unique(numpy.where(current_tetrahedron_coord_array == common_vertex_coordinate)[0])
   503      7983        63887      8.0      2.6                  next_tetrahedron_index_surrounding_generator = tri.neighbors[current_tetrahedron_index][current_tetrahedron_index_for_neighbour_propagation][0]
   504      7983       144059     18.0      6.0                  common_vertex_coordinate = array_candidate_vertices[array_candidate_vertices != common_vertex_coordinate] #for the next iteration
   505      7983        40995      5.1      1.7                  ordered_list_tetrahedron_indices_surrounding_current_generator.append(next_tetrahedron_index_surrounding_generator)
   506      7983        29176      3.7      1.2                  vertices_remaining -= 1
   507      1999        46999     23.5      1.9              dictionary_sorted_Voronoi_point_coordinates_for_each_generator[generator_index] = array_Voronoi_vertices[ordered_list_tetrahedron_indices_surrounding_current_generator]
   508      1999         8132      4.1      0.3              generator_index += 1
   509         1            3      3.0      0.0          return dictionary_sorted_Voronoi_point_coordinates_for_each_generator

